f<-function(a,b=2,c=NULL){
a^2
}
f(2)
f( ,2)
x <- list(foo = 1:4, bar = 0.6)
x[2]
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81), d = list(12,44,56))
x[c(1,3)]
x[[c(3,1)]]
q()
above <- function(x,n){
if(x>n){
x*10
}
else{
x+n
}
}
above(5,4)
above(4,5)
source('~/.active-rstudio-document')
columnmean <- function(y) {
numcol <- ncol(y)
meanCol <- numeric(numcol)
for(i in 1:nc){
meanCol[i]<-mean(y[,i])
}
meanCol
}
mt <- matrix(1:6, 2, 3)
mt
meanCol(mt)
columnmean(mt)
for(i in 1:numcol){
meanCol[i]<-mean(y[,i])
columnmean <- function(y) {
numcol <- ncol(y)
meanCol <- numeric(numcol)
for(i in 1:numcol){
meanCol[i]<-mean(y[,i])
}
meanCol
}
columnmean <- function(y) {
numcol <- ncol(y)
meanCol <- numeric(numcol)
for(i in 1:numcol){
meanCol[i]<-mean(y[,i])
}
meanCol
}
mt <-matrix(1:6,2,3)
mt
columnmean <- function(y) {
numcol <- ncol(y)
meanCol <- numeric(numcol)
for(i in 1:numcol){
meanCol[i]<-mean(y[,i])
}
meanCol
}
x <-matrix(1:6,2,3)
x
x[1, ]
x[1, ,drop=FALSE]
install.packages("swirl")
install("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls
rm(list=ls())
swirl()
5+7
x <- (5+7)
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+10
z*2+100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10, 100)
z*2+1000
my
'my'
"my"
info()
my
my_div
1:20
pi:10
15:1
?`''
?`'`
swirl()
?`'`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
along = my_seq
seq(along = my_seq)
seq_along(my_seq)
rep(0, TIMES=40)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Sai Grandhi")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
swirl()
bye()
x <- list(a = 1:5, b=rnorm(10))
x
lapply(x, mean)
x <- a=1:4
x<-1:4
lapply(x,runif)
x <- list(a=matrix(1:4, 2, 2), b= matrix (1:6, 2, 3))
x
lapply(x, funciton(extr) extr[1, ])
lapply(x, funciton(extr) extr[,1 ])
lapply(x, funciton(extr), extr[,1 ])
lapply(x, function(extr) extr[,1 ])
x <- matrix(rnorm(40), 2, 2)
x
apply(x, 2, mean)
x <- matrix(rnorm(40), 1, 4)
x
apply(x, 2, mean)
apply(x, 1, mean)
x <- matrix(1:6, 2, 3)
x
colMeans(x)
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- reo(NA, 1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x> 0]
x <- c(3, 5, 7)
x <- c(4, 6, 8)
x[c(3,5,7)]
bye()
library(swirl)
swirl()
bye()
library(swirl)
swirl()
x[0]
x[3000]
bye()
m
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<-inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if ( ! is.null(m)) {
print("getting cached data")
return(m)
}
m <- solve(x$get())
x$setInverse(m)
m
}
library(swirl)
swirl()
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
set.seed(1)
rpois(5, 2)
gl
f <- gl(40, 10)
str(f)
summary(f)
q()
setwd(C://users/sgrndh/Desktop/rprog/week4)
wd
wd()
getwd()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
q()
